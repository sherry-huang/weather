{"version":3,"sources":["Weather/WeatherConst.js","Weather/Card/WeatherCard.js","Weather/Weather.js","App.js","reportWebVitals.js","index.js","Weather/Weather.module.scss","Weather/Card/WeatherCard.module.scss"],"names":["authorizationKey","cityDefault","fetchWeatherForecast","cityName","fetch","then","response","json","data","records","location","map","locationData","weatherElements","weatherElement","reduce","neededElements","item","includes","elementName","time","parameter","locationName","description","Wx","parameterName","weatherCode","parameterValue","rainPossibility","PoP","parameterUnit","comfortability","CI","hightTemp","MaxT","lowTemp","MinT","cityNorthOptions","label","value","cityWestOptions","citySouthOptions","cityEastOptions","cityOtherOptions","Meta","Card","WeatherCard","this","props","switchIcon","className","styles","style","width","avatar","icon","EnvironmentOutlined","title","textAlign","card","size","Component","Weather","formRef","React","createRef","state","lastUpdate","code","faSun","faCloudSun","faCloudSunRain","faCloud","faCloudRain","faCloudShowersHeavy","faSnowflake","faSmog","onChange","key","setState","onFinish","fetchingForecast","a","Promise","all","renderCheckBox","id","gutter","idx","span","dayjs","Date","format","prevProps","prevState","isEqual","current","setFieldsValue","ref","initialValues","Item","name","wrapperCol","Group","e","offset","htmlType","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"iTAAMA,EAAmB,2CAKZC,EAAc,CACvB,qBAAO,qBAAO,qBAAO,qBAAO,qBAAO,qBAAO,qBAAO,qBAAO,qBACxD,qBAAO,qBAAO,qBAAO,qBAAO,qBAAO,qBAAO,qBAAO,qBAAO,qBACxD,qBAAO,qBAAO,qBAAO,sBAiCZC,EAAuB,SAACC,GACjC,OAAOC,MAAM,+EAAD,OACuEJ,EADvE,yBACwGG,IAEjHE,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACL,OAAOA,EAAKC,QAAQC,SAASC,KAAI,SAACC,GAC9B,IAAMC,EAAkBD,EAAaE,eAAeC,QAChD,SAACC,EAAgBC,GAIb,MAHI,CAAC,KAAM,MAAO,KAAM,OAAQ,QAAQC,SAASD,EAAKE,eAClDH,EAAeC,EAAKE,aAAeF,EAAKG,KAAK,GAAGC,WAE7CL,IAEX,IAGF,MAAO,CACLM,aAAcV,EAAaU,aAC3BC,YAAaV,EAAgBW,GAAGC,cAChCC,YAAab,EAAgBW,GAAGG,eAChCC,gBAAiBf,EAAgBgB,IAAIJ,cAAgB,IAAMZ,EAAgBgB,IAAIC,cAC/EC,eAAgBlB,EAAgBmB,GAAGP,cACnCQ,UAAWpB,EAAgBqB,KAAKT,cAAgB,OAAMZ,EAAgBqB,KAAKJ,cAC3EK,QAAStB,EAAgBuB,KAAKX,cAAgB,OAAMZ,EAAgBuB,KAAKN,sBA+C5EO,EAAmB,CAC5B,CAAEC,MAAO,qBAAOC,MAAO,sBACvB,CAAED,MAAO,qBAAOC,MAAO,sBACvB,CAAED,MAAO,qBAAOC,MAAO,sBACvB,CAAED,MAAO,qBAAOC,MAAO,sBACvB,CAAED,MAAO,qBAAOC,MAAO,sBACvB,CAAED,MAAO,qBAAOC,MAAO,uBAGdC,EAAkB,CAC3B,CAAEF,MAAO,qBAAOC,MAAO,sBACvB,CAAED,MAAO,qBAAOC,MAAO,sBACvB,CAAED,MAAO,qBAAOC,MAAO,sBACvB,CAAED,MAAO,qBAAOC,MAAO,sBACvB,CAAED,MAAO,qBAAOC,MAAO,uBAGdE,EAAmB,CAC5B,CAAEH,MAAO,qBAAOC,MAAO,sBACvB,CAAED,MAAO,qBAAOC,MAAO,sBACvB,CAAED,MAAO,qBAAOC,MAAO,sBACvB,CAAED,MAAO,qBAAOC,MAAO,sBACvB,CAAED,MAAO,qBAAOC,MAAO,uBAGdG,EAAkB,CAC3B,CAAEJ,MAAO,qBAAOC,MAAO,sBACvB,CAAED,MAAO,qBAAOC,MAAO,sBACvB,CAAED,MAAO,qBAAOC,MAAO,uBAGdI,EAAmB,CAC5B,CAAEL,MAAO,qBAAOC,MAAO,sBACvB,CAAED,MAAO,qBAAOC,MAAO,sBACvB,CAAED,MAAO,qBAAOC,MAAO,uB,4DC5InBK,EAASC,IAATD,KACFE,E,4JACF,WACI,MAA6BC,KAAKC,MAA1BC,EAAR,EAAQA,WAAYzC,EAApB,EAAoBA,KACpB,OACI,qBAAK0C,UAAWC,IAAO,gBAAvB,SACI,eAAC,IAAD,CAAMC,MAAO,CAAEC,MAAO,KAAtB,UACI,cAACT,EAAD,CACIU,OAAQ,cAAC,IAAD,CAAQC,KAAM,cAACC,EAAA,EAAD,MACtBC,MAAOjD,EAAKc,aACZC,YAAaf,EAAKe,YAClB6B,MAAO,CAAEM,UAAW,UAExB,sBAAKR,UAAWC,IAAOQ,KAAvB,UACI,sBAAKT,UAAWC,IAAO,cAAvB,UACI,sBAAKD,UAAWC,IAAO,eAAvB,UACI,oEAAY3C,EAAKoB,mBACjB,oEAAYpB,EAAKyB,aACjB,oEAAYzB,EAAK2B,cASrB,qBAAKe,UAAWC,IAAO,gBAAvB,SACI,cAAC,IAAD,CAAiBI,KAAMN,EAAWzC,EAAKkB,aAAckC,KAAK,YAGlE,8DAAWpD,EAAKuB,8B,GA9Bd8B,aAsCXf,I,4DC9BTgB,E,4MACFC,QAAUC,IAAMC,Y,EAEhBC,MAAQ,CACJ1D,KAAM,GACNE,SAAUT,EACVkE,WAAY,I,EAqChBlB,WAAa,SAACmB,GACV,OAAQA,GACJ,KAAK,EACD,OAAOC,IACX,KAAK,EACD,OAAOC,IACX,KAAK,EACD,OAAOC,IACX,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACD,OAAOC,IACX,KAAK,EACL,KAAK,EACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GAED,OAAOC,IACX,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GAED,OAAOC,IACX,KAAK,GACL,KAAK,GAED,OAAOC,IACX,QAEI,OAAOC,M,EAMnBC,SAAW,SAACtC,EAAOuC,GACf,EAAKC,SAAL,eACKD,EAAMvC,K,EAIfyC,SAAW,WAEP,IAAMC,EAAgB,uCAAG,4BAAAC,EAAA,sEACFC,QAAQC,IAAI,CAC3BlF,EAAqB,EAAKgE,MAAMxD,YAFf,OACfF,EADe,OAIrB,EAAKuE,SAAS,CACVvE,KAAMA,EAAK,KALM,2CAAH,qDAQtByE,K,EAGJI,eAAiB,WASb,MARmB,CACfhD,EACAG,EACAC,EACAC,EACAC,GAGchC,KAAI,SAACH,EAAM8E,GAAP,OACd,cAAC,IAAD,CAAKC,OAAQ,CAAC,GAAI,IAAlB,SACM/E,EAAKG,KAAI,SAACM,EAAMuE,GAAP,OACP,cAAC,IAAD,CAAKC,KAAM,EAAX,SACI,cAAC,IAAD,CAAUlD,MAAOtB,EAAKsB,MAAtB,SAA8BtB,EAAKqB,SADpBkD,OAFCF,O,uDAvHxC,WAAqB,IAAD,OAWVL,EAAgB,uCAAG,4BAAAC,EAAA,sEACFC,QAAQC,IAAI,CAC3BlF,EAAqBD,KAFJ,OACfO,EADe,OAIrB,EAAKuE,SAAS,CACVvE,KAAMA,EAAK,GACX2D,WAAYuB,IAAM,IAAIC,MAAQC,OAAO,sBANpB,2CAAH,qDAStBX,M,gCAKJ,SAAmBY,EAAWC,GACtBC,kBAAQD,EAAW/C,KAAKmB,QACxBnB,KAAKgB,QAAQiC,QAAQC,eAAelD,KAAKmB,S,kCAIjD,c,oBAmGA,WAAU,IAAD,OAGL,OACI,sBAAKhB,UAAWC,IAAM,QAAtB,UACI,sBAAKD,UAAWC,IAAO,kBAAvB,UACI,qBAAKD,UAAWC,IAAO,iBAAvB,sCACA,qBAAKD,UAAWC,IAAO,gBAAvB,SACI,eAAC,IAAD,CACI+C,IAAKnD,KAAKgB,QACViB,SAAUjC,KAAKiC,SACfmB,cAAepD,KAAKmB,MAHxB,UAKI,cAAC,IAAKkC,KAAN,yBACIC,KAAK,WACL/D,MAAM,kCAdX,CAAEgE,WAAY,CAAEb,KAAM,MAYrB,aAKI,cAAC,IAASc,MAAV,CACI1B,SAAU,SAAC2B,GAAD,OAAO,EAAK3B,SAAS2B,EAAG,aADtC,SAUSzD,KAAKsC,sBAGlB,cAAC,IAAKe,KAAN,2BA7BF,CAAEE,WAAY,CAAEG,OAAQ,MA6BtB,aACI,cAAC,IAAD,CACIC,SAAS,SADb,iDAOhB,qBAAKxD,UAAWC,IAAO,eAAvB,6DAAoDJ,KAAKmB,MAAMC,WAAapB,KAAKmB,MAAMC,WAAa,oCACpG,qBAAKjB,UAAWC,IAAO,gBAAvB,SAEQJ,KAAKmB,MAAM1D,KAAKG,KAAI,SAACM,EAAMuE,GAAP,OAChB,cAAC,EAAD,CAEIhF,KAAMS,EACNgC,WAAY,EAAKA,YAFZuC,e,GAvLf3B,aA4MPC,I,OC9MA6C,MARf,WACI,OACI,qBAAKzD,UAAU,MAAf,SACI,cAAC,EAAD,OCIG0D,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBzG,MAAK,YAAkD,IAA/C0G,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,OCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K,mBChBAa,EAAOC,QAAU,CAAC,QAAU,yBAAyB,iBAAiB,gCAAgC,gBAAgB,+BAA+B,eAAe,8BAA8B,cAAc,6BAA6B,eAAe,gC,mBCA5PD,EAAOC,QAAU,CAAC,eAAe,kCAAkC,KAAO,0BAA0B,aAAa,gCAAgC,cAAc,iCAAiC,eAAe,qC","file":"static/js/main.87d11f42.chunk.js","sourcesContent":["const authorizationKey = \"CWB-1BBC5EA4-812C-46AC-ACD8-0FD64A6E794C\";\r\nexport const locationDefault = [\r\n    \"嘉義\", \"臺北\", \"高雄\", \"臺中\", \"新竹\", \"澎湖\", \"花蓮\", \"臺東\", \"蘭嶼\", \"基隆\", \"宜蘭\", \"金門\", \"馬祖\"\r\n];\r\n\r\nexport const cityDefault = [\r\n    '嘉義縣', '新北市', '嘉義市', '新竹縣', '新竹市', '臺北市', '臺南市', '宜蘭縣', '苗栗縣',\r\n    '雲林縣', '花蓮縣', '臺中市', '臺東縣', '桃園市', '南投縣', '高雄市', '金門縣', '屏東縣',\r\n    '基隆市', '澎湖縣', '彰化縣', '連江縣'\r\n];\r\n\r\nexport const fetchWeather = (locationName) => {\r\n    return fetch(\r\n        `https://opendata.cwb.gov.tw/api/v1/rest/datastore/O-A0003-001?Authorization=${authorizationKey}&elementName=TEMP,D_TX,D_TN&parameterName=CITY,CITY_SN&locationName=${locationName}`\r\n    )\r\n    .then((response) => response.json())\r\n    .then((data) => {\r\n\r\n        return data.records.location.map((locationData) => {\r\n            const weatherElements = locationData.weatherElement.reduce(\r\n                (neededElements, item) => {\r\n                    if ([\"TEMP\", \"D_TX\", \"D_TN\"].includes(item.elementName)) {\r\n                        neededElements[item.elementName] = item.elementValue;\r\n                    }\r\n                    return neededElements;\r\n                    },\r\n                {}\r\n            );\r\n    \r\n            return {\r\n                observationTime: locationData.time.obsTime,\r\n                locationName: locationData.locationName,\r\n                temperature: weatherElements.TEMP,\r\n                hightTemp: weatherElements.D_TX,\r\n                lowTemp: weatherElements.D_TN,\r\n            };\r\n        })\r\n        \r\n    });\r\n};\r\n\r\nexport const fetchWeatherForecast = (cityName) => {\r\n    return fetch(\r\n        `https://opendata.cwb.gov.tw/api/v1/rest/datastore/F-C0032-001?Authorization=${authorizationKey}&locationName=${cityName}`\r\n    )\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        return data.records.location.map((locationData) => {\r\n            const weatherElements = locationData.weatherElement.reduce(\r\n                (neededElements, item) => {\r\n                    if (['Wx', 'PoP', 'CI', 'MinT', 'MaxT'].includes(item.elementName)) {\r\n                        neededElements[item.elementName] = item.time[0].parameter;\r\n                    }\r\n                    return neededElements;\r\n                },\r\n                {}\r\n              );\r\n\r\n              return {\r\n                locationName: locationData.locationName,\r\n                description: weatherElements.Wx.parameterName, // 晴時多雲\r\n                weatherCode: weatherElements.Wx.parameterValue, // 2\r\n                rainPossibility: weatherElements.PoP.parameterName + \" \" + weatherElements.PoP.parameterUnit, // 降雨機率\r\n                comfortability: weatherElements.CI.parameterName, // 稍有寒意至舒適\r\n                hightTemp: weatherElements.MaxT.parameterName + \"°\" + weatherElements.MaxT.parameterUnit, // 最高溫度\r\n                lowTemp: weatherElements.MinT.parameterName + \"°\" + weatherElements.MinT.parameterUnit, // 最低溫度\r\n            };\r\n        })\r\n      });\r\n  };\r\n\r\nexport const locationOptions = [\r\n    { label: '嘉義', value: '嘉義' },\r\n    { label: '臺北', value: '臺北' },\r\n    { label: '高雄', value: '高雄' },\r\n    { label: '臺中', value: '臺中' },\r\n    { label: '新竹', value: '新竹' },\r\n    { label: '澎湖', value: '澎湖' },\r\n    { label: '花蓮', value: '花蓮' },\r\n    { label: '臺東', value: '臺東' },\r\n    { label: '蘭嶼', value: '蘭嶼' },\r\n    { label: '基隆', value: '基隆' },\r\n    { label: '宜蘭', value: '宜蘭' },\r\n    { label: '馬祖', value: '馬祖' },\r\n    { label: '金門', value: '金門' },\r\n  ];\r\n\r\nexport const cityOptions = [\r\n    { label: '基隆市', value: '基隆市' },\r\n    { label: '新北市', value: '新北市' },\r\n    { label: '臺北市', value: '臺北市' },\r\n    { label: '桃園市', value: '桃園市' },\r\n    { label: '新竹縣', value: '新竹縣' },\r\n    { label: '新竹市', value: '新竹市' },\r\n    { label: '苗栗縣', value: '苗栗縣' },\r\n    { label: '臺中市', value: '臺中市' },\r\n    { label: '彰化縣', value: '彰化縣' },\r\n    { label: '雲林縣', value: '雲林縣' },\r\n    { label: '南投縣', value: '南投縣' },\r\n    { label: '嘉義縣', value: '嘉義縣' },\r\n    { label: '嘉義市', value: '嘉義市' },\r\n    { label: '臺南市', value: '臺南市' },\r\n    { label: '高雄市', value: '高雄市' },\r\n    { label: '金門縣', value: '金門縣' },\r\n    { label: '屏東縣', value: '屏東縣' },\r\n    { label: '宜蘭縣', value: '宜蘭縣' },\r\n    { label: '臺東縣', value: '臺東縣' },\r\n    { label: '花蓮縣', value: '花蓮縣' },\r\n    { label: '連江縣', value: '連江縣' },\r\n    { label: '澎湖縣', value: '澎湖縣' }\r\n];\r\n\r\nexport const cityNorthOptions = [\r\n    { label: '基隆市', value: '基隆市' },\r\n    { label: '新北市', value: '新北市' },\r\n    { label: '臺北市', value: '臺北市' },\r\n    { label: '桃園市', value: '桃園市' },\r\n    { label: '新竹縣', value: '新竹縣' },\r\n    { label: '新竹市', value: '新竹市' },\r\n];\r\n\r\nexport const cityWestOptions = [\r\n    { label: '苗栗縣', value: '苗栗縣' },\r\n    { label: '臺中市', value: '臺中市' },\r\n    { label: '彰化縣', value: '彰化縣' },\r\n    { label: '雲林縣', value: '雲林縣' },\r\n    { label: '南投縣', value: '南投縣' },\r\n];\r\n\r\nexport const citySouthOptions = [\r\n    { label: '嘉義縣', value: '嘉義縣' },\r\n    { label: '嘉義市', value: '嘉義市' },\r\n    { label: '臺南市', value: '臺南市' },\r\n    { label: '高雄市', value: '高雄市' },\r\n    { label: '屏東縣', value: '屏東縣' },\r\n];\r\n\r\nexport const cityEastOptions = [\r\n    { label: '宜蘭縣', value: '宜蘭縣' },\r\n    { label: '花蓮縣', value: '花蓮縣' },\r\n    { label: '臺東縣', value: '臺東縣' },\r\n];\r\n\r\nexport const cityOtherOptions = [\r\n    { label: '金門縣', value: '金門縣' },\r\n    { label: '連江縣', value: '連江縣' },\r\n    { label: '澎湖縣', value: '澎湖縣' }\r\n];","import React, { Component } from 'react';\r\nimport { Card, Avatar } from 'antd';\r\nimport styles from './WeatherCard.module.scss';\r\nimport { EnvironmentOutlined } from '@ant-design/icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nconst { Meta } = Card;\r\nclass WeatherCard extends Component {\r\n    render() {\r\n        const { switchIcon, data } = this.props;\r\n        return (\r\n            <div className={styles['weather-card']}>\r\n                <Card style={{ width: 300 }}>\r\n                    <Meta\r\n                        avatar={<Avatar icon={<EnvironmentOutlined />}/>}\r\n                        title={data.locationName}\r\n                        description={data.description}\r\n                        style={{ textAlign: \"left\"}}\r\n                    />\r\n                    <div className={styles.card}>\r\n                        <div className={styles['card-detil']}>\r\n                            <div className={styles['detail-left']}>\r\n                                <p>{`降雨機率：${data.rainPossibility}`}</p>\r\n                                <p>{`最高溫度：${data.hightTemp}`}</p>\r\n                                <p>{`最低溫度：${data.lowTemp}`}</p>\r\n                                {/* locationName: locationData.locationName,\r\n                                description: weatherElements.Wx.parameterName, // 晴時多雲\r\n                                weatherCode: weatherElements.Wx.parameterValue, // 2\r\n                                rainPossibility: weatherElements.PoP.parameterName, // 降雨機率\r\n                                comfortability: weatherElements.CI.parameterName, // 稍有寒意至舒適\r\n                                hightTemp: weatherElements.D_TX, // 最高溫度\r\n                                lowTemp: weatherElements.D_TN, // 最低溫度 */}\r\n                            </div>\r\n                            <div className={styles['detail-right']}>\r\n                                <FontAwesomeIcon icon={switchIcon(data.weatherCode)} size=\"4x\"/>\r\n                            </div>\r\n                        </div>\r\n                        <p>{`舒適度：${data.comfortability}`}</p>\r\n                    </div>\r\n                </Card>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default WeatherCard;","import React, { Component } from 'react';\r\nimport dayjs from 'dayjs';\r\nimport styles from './Weather.module.scss';\r\nimport { fetchWeatherForecast, cityDefault,\r\n        cityNorthOptions, cityWestOptions, citySouthOptions,\r\n        cityEastOptions, cityOtherOptions\r\n    } from './WeatherConst';\r\nimport WeatherCard from './Card/WeatherCard';\r\nimport { Checkbox, Form, Button, Row, Col } from 'antd';\r\nimport { isEqual } from 'lodash';\r\nimport { faSun, faCloud, faCloudSun,\r\n        faCloudSunRain, faCloudRain, faCloudShowersHeavy,\r\n        faSnowflake, faSmog\r\n    } from '@fortawesome/free-solid-svg-icons';\r\n\r\nclass Weather extends Component {\r\n    formRef = React.createRef();\r\n\r\n    state = {\r\n        data: [],\r\n        location: cityDefault,\r\n        lastUpdate: \"\"\r\n    }\r\n\r\n    componentDidMount() {\r\n        // const fetchingData = async () => {\r\n        //     const data = await Promise.all([\r\n        //         fetchWeather(locationDefault)\r\n        //     ]);\r\n        //     this.setState({\r\n        //         data: data[0]\r\n        //     })\r\n        // }\r\n        // fetchingData();\r\n\r\n        const fetchingForecast = async () => {\r\n            const data = await Promise.all([\r\n                fetchWeatherForecast(cityDefault)\r\n            ]);\r\n            this.setState({\r\n                data: data[0],\r\n                lastUpdate: dayjs(new Date()).format('YYYY-MM-DD HH:mm')\r\n            })\r\n        }\r\n        fetchingForecast();\r\n        \r\n        \r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if(!isEqual(prevState, this.state)) {\r\n            this.formRef.current.setFieldsValue(this.state);\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n    }\r\n\r\n    switchIcon = (code) => {\r\n        switch (code) {\r\n            case 1:\r\n                return faSun;\r\n            case 2:\r\n                return faCloudSun;\r\n            case 3:\r\n                return faCloudSunRain;\r\n            case 4:\r\n            case 5:\r\n            case 6:\r\n            case 7:\r\n                return faCloud;\r\n            case 8:\r\n            case 9:\r\n            case 10:\r\n            case 11:\r\n            case 12:\r\n            case 13:\r\n            case 14:\r\n            case 20:\r\n            case 29:\r\n            case 30:\r\n            case 31:\r\n            case 32:\r\n                // 雨\r\n                return faCloudRain;\r\n            case 15:\r\n            case 16:\r\n            case 17:\r\n            case 18:\r\n            case 19:\r\n            case 21:\r\n            case 22:\r\n            case 33:\r\n            case 34:\r\n            case 35:\r\n            case 36:\r\n            case 37:\r\n            case 38:\r\n            case 39:\r\n            case 41:\r\n                // 大雨\r\n                return faCloudShowersHeavy;\r\n            case 23:\r\n            case 42:\r\n                // 雪\r\n                return faSnowflake;\r\n            default:\r\n                // 霧 25 26 27 28\r\n                return faSmog;\r\n        }\r\n\r\n    }\r\n\r\n    // type: undone, done, archive\r\n    onChange = (value, key) => {\r\n        this.setState({\r\n            [key]: value\r\n        })\r\n    }\r\n\r\n    onFinish = () => {\r\n\r\n        const fetchingForecast = async () => {\r\n            const data = await Promise.all([\r\n                fetchWeatherForecast(this.state.location)\r\n            ]);\r\n            this.setState({\r\n                data: data[0]\r\n            })\r\n        }\r\n        fetchingForecast();\r\n    }\r\n\r\n    renderCheckBox = () => {\r\n        const renderData = [\r\n            cityNorthOptions,\r\n            cityWestOptions,\r\n            citySouthOptions,\r\n            cityEastOptions,\r\n            cityOtherOptions\r\n        ];\r\n\r\n        return renderData.map((data, id) => (\r\n                <Row gutter={[16, 24]} key={id}>\r\n                    { data.map((item, idx) => (\r\n                        <Col span={4} key={idx}>\r\n                            <Checkbox value={item.value}>{item.label}</Checkbox>\r\n                        </Col>\r\n                    ))}\r\n                </Row>\r\n            )\r\n        )\r\n    }\r\n\r\n    render() {\r\n        const itemLayout = { wrapperCol: { span: 14 }}\r\n        const btnLayout = { wrapperCol: { offset: 20 }}\r\n        return (\r\n            <div className={styles['weather']}>\r\n                <div className={styles['weather-header']}>\r\n                    <div className={styles['weather-title']}>天氣查詢</div>\r\n                    <div className={styles['weather-form']}>\r\n                        <Form\r\n                            ref={this.formRef}\r\n                            onFinish={this.onFinish}\r\n                            initialValues={this.state}\r\n                        >\r\n                            <Form.Item\r\n                                name=\"location\"\r\n                                label=\"請選擇地區\"\r\n                                {...itemLayout}\r\n                            >\r\n                                <Checkbox.Group\r\n                                    onChange={(e) => this.onChange(e, \"location\")}\r\n                                >\r\n                                        {/* { cityOptions.map((item, idx) => {\r\n                                            <Row>\r\n                                                <Col span={2} key={idx}>\r\n                                                    <Checkbox value={item.value}>{item.label}</Checkbox>\r\n                                                </Col>\r\n                                            </Row>\r\n                                        })} */}\r\n                                        {this.renderCheckBox()}\r\n                                </Checkbox.Group>\r\n                            </Form.Item>\r\n                            <Form.Item {...btnLayout}>\r\n                                <Button\r\n                                    htmlType=\"submit\"\r\n                                >送出查詢</Button>\r\n                            </Form.Item>\r\n                        </Form>\r\n                    </div>\r\n                </div>\r\n                <div className={styles['last-update']}>{`最後查詢時間：${!!this.state.lastUpdate ? this.state.lastUpdate : \"無查詢資料\"}`}</div>\r\n                <div className={styles['weather-list']}>\r\n                    {\r\n                        this.state.data.map((item, idx) => (\r\n                            <WeatherCard\r\n                                key={idx}\r\n                                data={item}\r\n                                switchIcon={this.switchIcon}\r\n                            />\r\n                        ))\r\n                    }\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n// const mapStateToProps = (state) => ({\r\n//     todoList: selectors.makeGetTodoList(state),\r\n// });\r\n\r\n// const mapDispatchToProps = {\r\n//     ...actions,\r\n// };\r\n\r\n// const withConnect = connect(mapStateToProps, mapDispatchToProps);\r\nexport default Weather;","// import logo from './logo.svg';\nimport Weather from \"./Weather/Weather\";\n\nimport \"./App.css\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Weather />\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'antd/dist/antd.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"weather\":\"Weather_weather__2GwYN\",\"weather-header\":\"Weather_weather-header__29e8-\",\"weather-title\":\"Weather_weather-title__3_RTe\",\"weather-form\":\"Weather_weather-form__2pzKg\",\"last-update\":\"Weather_last-update__1AerC\",\"weather-list\":\"Weather_weather-list__10hX9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"weather-card\":\"WeatherCard_weather-card__1As8c\",\"card\":\"WeatherCard_card__31Lc6\",\"card-detil\":\"WeatherCard_card-detil__2_6pi\",\"detail-left\":\"WeatherCard_detail-left__1hMM8\",\"detail-right\":\"WeatherCard_detail-right__yfP_i\"};"],"sourceRoot":""}